uint8_t ICM20948Class::ICM20948_startupDefault()
************************************************

ICM20948_reset();
    ICM20948_REG_PWR_MGMT_1
    DEVICE_RESET [7:7]  = 1 (Autoclear)
    Reset Value: 0x41 : 0100 0001

delay(50);

ICM20948_sleep(false);
    SLEEP [6:6] = 0

ICM20948_lowPower(false);
    LP _EN [5:5] = 0

ICM20948_checkDeviceID();
ICM20948_checkStartup();
Final value:  0000 0001
________________________________________________  
  
Initializing the ICM
        Configure clock source through PWR_MGMT_1.
        Enable accel and gyro sensors through PWR_MGMT_2.
        Configure Gyro/Accel in Low power mode with LP_CONFIG. ??
        Set Gyro FSR (Full scale range) to 2000dps through GYRO_CONFIG_1.
        Set Accel FSR (Full scale range) to 4g through ACCEL_CONFIG.
 
    

    // Auto selects the best available clock source, i.e. the PLL will be selected whenever gyroscope is on.
    // The internal relaxation oscillator is trimmed to have a consistent operating frequency at room temperature, while the PLL clock frequency varies from part to part
    // But PLL has better frequency stability and lower frequency variation over temperature than the internal relaxation oscillator.
    // The PLL frequency deviation from the nominal value in percentage is captured in register TIMEBASE_CORRECTION_PLL,
    ICM20948_setClockSource(ICM_20948_CLOCK_AUTO);
    #define ICM_20948_CLOCK_AUTO                0x01                        /**< Auto selects the best available clock source           */
    CLKSEL[2:0]
    ICM20948_REG_PWR_MGMT_1
    old Value:      0000 0001
    new Value:      0000 0001
  
            
    // Enable Accelerometer and Gyroscope(all axes)on.
    ICM20948_REG_PWR_MGMT_2
    DISABLE_ACCEL[5:3] = 000
    DISABLE_GYRO[2:0] = 000
    reset Value: 0x00 0000 0000
    new   Value:      0000 0000
    
    
    //Configure Gyro/Accel in Low power mode. 
    ICM20948_REG_LP_CONFIG
    I2C_MST_CYCLE [6:6]
    ACCEL_CYCLE[5:5]
    GYRO_CYCLE[4:4] 
    Reset Value: 0x40 0100 0000
    new Value:        0100 0000  
    
    delay(1); // Give the ICM20948 time to change the sample mode (see issue #8)
      
    // Disable FIFO  
    ICM20948_enableFIFO(false);
    FIFO_EN [6:6]  
    ICM20948_REG_USER_CTRL
    Reset Value: 0x00 0000 0000
    new Value:        0000 0000    
    
    // Disable DMP  
    ICM20948_enableDMP(false);
    DMP_EN [7:7] 
    ICM20948_REG_USER_CTRL
    new Value:        0000 0000 
    
    //Set Gyro FSR (Full scale range) to 2000dps through GYRO_CONFIG_1.
    // Config Gyro 2000dps, value from DMP doc
    ICM20948_setFullScaleGyro(ICM20948_GYRO_FULLSCALE_2000DPS); 
    #define ICM20948_GYRO_FULLSCALE_2000DPS     0x03   
    GYRO_FS_SEL[2:1] = 11 2000DPS
    ICM20948_REG_GYRO_CONFIG_1 BANK 2
    Reset Value: 0x01 0000 0001    
    new Value:        0000 0111
         
    // Enable Gyro DLPF with bandwith 196.6HZ - 229.8HZ , value from DMP doc          
    ICM20948_enableDLPFGyro(ICM20948_GYRO_BW_200HZ, true);
    #define ICM20948_GYRO_BW_200HZ              0x00     
    GYRO_FCHOICE [0:0]=1 + GYRO_DLPFCFG[5:3] =0 
    ICM20948_REG_GYRO_CONFIG_1
    old Value:        0000 0111
    new Value:        0000 0111
     
    // Set Accel FSR (Full scale range) to 4g through ACCEL_CONFIG.   
    // Config Accel 4g, value from DMP doc
    ICM20948_setFullScaleAccel(ICM20948_ACCEL_FULLSCALE_4G); 
    #define ICM20948_ACCEL_FULLSCALE_4G         0x01 
    ACCEL_FS_SEL[2:1] = 01 4G 
    ICM20948_REG_ACCEL_CONFIG
    Reset Value: 0x01 0000 0001
    new Value:        0000 0011    
         
    // Enable Accel DLPF with bandwith 246.0HZ - 265.0HZ ???   
    ICM20948_enableDLPFAccel(ICM20948_ACCEL_BW_246HZ, true);
    #define ICM20948_ACCEL_BW_246HZ             0x00       
    ACCEL_FCHOICE [0:0]=1 + ACCEL_DLPFCFG[5:3]=0 
    ICM20948_REG_ACCEL_CONFIG
    old Value:        0000 0011
    new Value:        0000 0011   
    
     
Configuring FIFO and Interrupts
*******************************

Enable interrupt for FIFO overflow from FIFOs through INT_ENABLE_2.
    FIFO_OVERFLOW_EN[4:0]= 1111
    ICM20948_REG_INT_ENABLE_2
    Reset Value: 0x00 0000 0000
    new Value:        0000 1111


Turn off what goes into the FIFO through FIFO_EN_1, FIFO_EN_2.
    SLV_3_FIFO_EN[3:3]= 0
    SLV_2_FIFO_EN[2:2]= 0
    SLV_1_FIFO_EN[1:1]= 0
    SLV_0_FIFO_EN[0:0]= 0
    ICM20948_REG_FIFO_EN_1    
    Reset Value: 0x00 0000 0000
    new Value:        0000 0000
    
    ACCEL_FIFO_EN[4:4]= 0
    GYRO_Z_FIFO_EN[3:3]= 0
    GYRO_Y_FIFO_EN[2:2]= 0
    GYRO_X_FIFO_EN[1:1]= 0
    TEMP_FIFO_EN[0:0]= 0
    ICM20948_REG_FIFO_EN_2   
    Reset Value: 0x00 0000 0000
    new Value:        0000 0000

Turn off data ready interrupt through INT_ENABLE_1. 
    RAW_DATA_0_RDY_EN[0:0]= 0
    ICM20948_REG_INT_ENABLE_1
    Reset Value: 0x00 0000 0000
    new Value:        0000 0000 


3.3 Reset the FIFO
Reset FIFO through FIFO_RST.
Assert and hold to set FIFO size to 0. Assert and de-assert to reset FIFO.
    FIFO_RESET[4:0]]= 1111
    FIFO_RESET[4:0]]= 1110
    ICM20948_REG_FIFO_RST
    Reset Value: 0x00 0000 0000
    new Value:        0001 1110 
 
 3.4 Configuring Sensor Sample Rate
Set gyro sample rate divider with GYRO_SMPLRT_DIV.
    GYRO_SMPLRT_DIV[7:0]=0x13 = 0001 0011
    ICM20948_REG_GYRO_SMPLRT_DIV
    Reset Value: 0x00 0000 0000
    new Value:        0001 0011 

Set accel sample rate divider with ACCEL_SMPLRT_DIV_1. + ACCEL_SMPLRT_DIV_2  
    ACCEL_SMPLRT_DIV[3:0]
    ICM20948_REG_ACCEL_SMPLRT_DIV_1 (MSB)
    Reset Value: 0x00 0000 0000
    new Value:        0000 0000        
    ACCEL_SMPLRT_DIV[7:0] = 0001 0011
    ICM20948_REG_ACCEL_SMPLRT_DIV_2 (LSB)
    Reset Value: 0x00 0000 0000
    new Value:   0x1E 0001 0011 

3.5 Configuring the DMP start address
Setup DMP start address 0x1000 through PRGM_STRT_ADDRH/PRGM_STRT_ADDRL.
DMP_REG_PRGM_START_ADDRH= 0001 0000
DMP_REG_PRGM_START_ADDRL= 0000 0000


Loading DMP Firmware
   Make sure chip is awake
   ICM_20948_sleep (false)
   SLEEP[6:6]=0
   ICM20948_REG_PWR_MGMT_1
   old Value: 0x01 0000 0001
   new Value: 0x01 0000 0001

   Make sure chip is not in low power state
   ICM20948_lowPower(false); 
   LP_EN[5:5]=0
   ICM20948_REG_PWR_MGMT_1
   old Value: 0x01 0000 0001
   new Value: 0x01 0000 0001
  
   Write the 2 byte Firmware Start Value to ICM PRGM_STRT_ADDRH/PRGM_STRT_ADDRL
   
   
   Enable LP_EN since we disabled it at begining of this function.
   ICM20948_lowPower(true); // Put chip into low power state
   LP_EN[5:5]=1
   ICM20948_REG_PWR_MGMT_1
   old Value: 0x01 0000 0001
   new Value: 0x21 0010 0001

Set the Single FIFO Priority Select register to 0xE4 
DMP_REG_SINGLE_FIFO_PRIORITY_SEL = 0xE4

Configure Accel scaling to DMP
The DMP scales accel raw data internally to align 1g as 2^25.
To do this and output hardware unit again as configured FSR, write 0x4000000 to ACC_SCALE DMP register, and write 0x40000 to ACC_SCALE2 DMP register.

Configure Compass mount matrix and scale to DMP
The mount matrix write to DMP register is used to align the compass axes with accel/gyro. This mechanism is also used to convert hardware unit to uT. The value is expressed as 1uT = 2^30.

 // Configure the DMP Gyro Scaling Factor
  // @param[in] gyro_div Value written to GYRO_SMPLRT_DIV register, where
  //            0=1125Hz sample rate, 1=562.5Hz sample rate, ... 4=225Hz sample rate, ...
  //            10=102.2727Hz sample rate, ... etc.
  // @param[in] gyro_level 0=250 dps, 1=500 dps, 2=1000 dps, 3=2000 dps
  result = setGyroSF(19, 3); if (result > worstResult) worstResult = result; // 19 = 55Hz (see above), 3 = 2000dps (see above)

  // Configure the Gyro full scale
  // 2000dps : 2^28
  // 1000dps : 2^27
  //  500dps : 2^26
  //  250dps : 2^25
  const unsigned char gyroFullScale[4] = {0x10, 0x00, 0x00, 0x00}; // 2000dps : 2^28
  result = writeDMPmems(GYRO_FULLSCALE, 4, &gyroFullScale[0]); if (result > worstResult) worstResult = result;

  // Configure the Accel Only Gain: 15252014 (225Hz) 30504029 (112Hz) 61117001 (56Hz)
  const unsigned char accelOnlyGain[4] = {0x03, 0xA4, 0x92, 0x49}; // 56Hz
  //const unsigned char accelOnlyGain[4] = {0x00, 0xE8, 0xBA, 0x2E}; // 225Hz
  //const unsigned char accelOnlyGain[4] = {0x01, 0xD1, 0x74, 0x5D}; // 112Hz
  result = writeDMPmems(ACCEL_ONLY_GAIN, 4, &accelOnlyGain[0]); if (result > worstResult) worstResult = result;

  // Configure the Accel Alpha Var: 1026019965 (225Hz) 977872018 (112Hz) 882002213 (56Hz)
  const unsigned char accelAlphaVar[4] = {0x34, 0x92, 0x49, 0x25}; // 56Hz
  //const unsigned char accelAlphaVar[4] = {0x3D, 0x27, 0xD2, 0x7D}; // 225Hz
  //const unsigned char accelAlphaVar[4] = {0x3A, 0x49, 0x24, 0x92}; // 112Hz
  result = writeDMPmems(ACCEL_ALPHA_VAR, 4, &accelAlphaVar[0]); if (result > worstResult) worstResult = result;

  // Configure the Accel A Var: 47721859 (225Hz) 95869806 (112Hz) 191739611 (56Hz)
  const unsigned char accelAVar[4] = {0x0B, 0x6D, 0xB6, 0xDB}; // 56Hz
  //const unsigned char accelAVar[4] = {0x02, 0xD8, 0x2D, 0x83}; // 225Hz
  //const unsigned char accelAVar[4] = {0x05, 0xB6, 0xDB, 0x6E}; // 112Hz
  result = writeDMPmems(ACCEL_A_VAR, 4, &accelAVar[0]); if (result > worstResult) worstResult = result;

  // Configure the Accel Cal Rate
  const unsigned char accelCalRate[4] = {0x00, 0x00}; // Value taken from InvenSense Nucleo example
  result = writeDMPmems(ACCEL_CAL_RATE, 2, &accelCalRate[0]); if (result > worstResult) worstResult = result;

  // Configure the Compass Time Buffer. The I2C Master ODR Configuration (see above) sets the magnetometer read rate to 68.75Hz.
  // Let's set the Compass Time Buffer to 69 (Hz).
  const unsigned char compassRate[2] = {0x00, 0x45}; // 69Hz
  result = writeDMPmems(CPASS_TIME_BUFFER, 2, &compassRate[0]); if (result > worstResult) worstResult = result;




